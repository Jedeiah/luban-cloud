/*
 Navicat Premium Data Transfer

 Source Server         : localhost
 Source Server Type    : MySQL
 Source Server Version : 80018 (8.0.18)
 Source Host           : localhost:3306
 Source Schema         : nacos_config

 Target Server Type    : MySQL
 Target Server Version : 80018 (8.0.18)
 File Encoding         : 65001

 Date: 02/04/2024 23:17:04
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'group_id',
  `content` longtext COLLATE utf8mb4_general_ci NOT NULL COMMENT 'content',
  `md5` varchar(32) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COLLATE utf8mb4_general_ci COMMENT 'source user',
  `src_ip` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'app_name',
  `tenant_id` varchar(128) COLLATE utf8mb4_general_ci DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'configuration description',
  `c_use` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'configuration usage',
  `effect` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '配置生效的描述',
  `type` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '配置的类型',
  `c_schema` text COLLATE utf8mb4_general_ci COMMENT '配置的模式',
  `encrypted_data_key` text COLLATE utf8mb4_general_ci NOT NULL COMMENT '密钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='config_info';

-- ----------------------------
-- Records of config_info
-- ----------------------------
BEGIN;
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (2, 'product-dev.yml', 'DEFAULT_GROUP', '# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\n', '88a08e03abdada0e813ba4d0afe12db8', '2024-03-29 17:27:53', '2024-03-30 14:45:16', 'nacos', '192.168.65.1', '', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (4, 'application-dev.yml', 'DEFAULT_GROUP', 'springdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://192.168.0.151:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n    #Redis配置\n  data:\n    redis:\n      host: ${REDIS_HOST:192.168.0.151}\n      port: 6379\n      password: jedeiah\n\n# actuator\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      enabled: true\n      show-details: ALWAYS\n    gateway:\n      enabled: true\n\nmybatis-plus:\n  typeEnumsPackage: com.jedeiah.commons.enums', '0b732664450c55690ec7962a8f3a43a0', '2024-03-29 17:30:46', '2024-03-31 15:28:21', 'nacos', '192.168.65.1', '', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (14, 'uaa-dev.yml', 'DEFAULT_GROUP', 'github:\n  clientId: d9352007e09ee5ddbb99\n  clientSecret: e0c4667eeb79008d31364ae7a1793376e00cd4e7\n  authorizeUrl: https://github.com/login/oauth/authorize\n  redirectUrl : http://localhost:8090/githubloding.html\n  accessTokenUrl: https://github.com/login/oauth/access_token\n  userInfoUrl: https://api.github.com/user\n\n', 'cc83e29cad8ee03bef4502075f7ab41d', '2024-03-30 01:04:59', '2024-04-02 18:34:14', 'nacos', '192.168.65.1', '', 'dev', '', '', '', 'yaml', '', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`, `encrypted_data_key`) VALUES (23, 'gateway-dev.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    gateway:\n      globalcors:\n        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题\n        corsConfigurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOriginPatterns: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n              - OPTIONS\n            allowedHeaders: \"*\" # 允许在请求中携带的头信息\n            allowCredentials: true # 是否允许携带cookie\n            maxAge: 360000 # 这次跨域检测的有效期\n      routes:\n        - id: uaa\n          uri: lb://uaa\n          predicates:\n            - Path=/api/uaa/**\n          filters:\n            - StripPrefix=2\n            - name: RequestRateLimiter #局部限流过滤器，请求数限流 ，使用默认的facatory\n              args:\n                key-resolver: \"#{@ipKeyResolver}\"# 用户身份唯一标识（与代码里的注释写法一致）\n                redis-rate-limiter.replenishRate: 1 #每秒只允许一个请求\n                redis-rate-limiter.burstCapacity: 3 #宽限的请求数量（即实际允许并发4个请求）\n        - id: uaa-oauth2 \n          uri: lb://uaa\n          predicates:\n            - Path=/oauth2/**\n        - id: product\n          uri: lb://product\n          predicates:\n            - Path=/api/product/**\n          filters:\n            - StripPrefix=2\n\n', '0f5632a1c23581527ec539bfcc652ff4', '2024-03-30 14:55:37', '2024-04-01 15:45:31', 'nacos', '192.168.65.1', '', 'dev', '', '', '', 'yaml', '', '');
COMMIT;

-- ----------------------------
-- Table structure for config_info_aggr
-- ----------------------------
DROP TABLE IF EXISTS `config_info_aggr`;
CREATE TABLE `config_info_aggr` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'datum_id',
  `content` longtext COLLATE utf8mb4_general_ci NOT NULL COMMENT '内容',
  `gmt_modified` datetime NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'app_name',
  `tenant_id` varchar(128) COLLATE utf8mb4_general_ci DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='增加租户字段';

-- ----------------------------
-- Records of config_info_aggr
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_beta
-- ----------------------------
DROP TABLE IF EXISTS `config_info_beta`;
CREATE TABLE `config_info_beta` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8mb4_general_ci NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COLLATE utf8mb4_general_ci COMMENT 'source user',
  `src_ip` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) COLLATE utf8mb4_general_ci DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` text COLLATE utf8mb4_general_ci NOT NULL COMMENT '密钥',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='config_info_beta';

-- ----------------------------
-- Records of config_info_beta
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_tag
-- ----------------------------
DROP TABLE IF EXISTS `config_info_tag`;
CREATE TABLE `config_info_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) COLLATE utf8mb4_general_ci DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8mb4_general_ci NOT NULL COMMENT 'content',
  `md5` varchar(32) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COLLATE utf8mb4_general_ci COMMENT 'source user',
  `src_ip` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='config_info_tag';

-- ----------------------------
-- Records of config_info_tag
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation` (
  `id` bigint(20) NOT NULL COMMENT 'id',
  `tag_name` varchar(128) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) COLLATE utf8mb4_general_ci DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'nid, 自增长标识',
  PRIMARY KEY (`nid`),
  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='config_tag_relation';

-- ----------------------------
-- Records of config_tags_relation
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='集群、各Group容量信息表';

-- ----------------------------
-- Records of group_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info` (
  `id` bigint(20) unsigned NOT NULL COMMENT 'id',
  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'nid, 自增标识',
  `data_id` varchar(255) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'app_name',
  `content` longtext COLLATE utf8mb4_general_ci NOT NULL COMMENT 'content',
  `md5` varchar(32) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text COLLATE utf8mb4_general_ci COMMENT 'source user',
  `src_ip` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'source ip',
  `op_type` char(10) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'operation type',
  `tenant_id` varchar(128) COLLATE utf8mb4_general_ci DEFAULT '' COMMENT '租户字段',
  `encrypted_data_key` text COLLATE utf8mb4_general_ci NOT NULL COMMENT '密钥',
  PRIMARY KEY (`nid`),
  KEY `idx_gmt_create` (`gmt_create`),
  KEY `idx_gmt_modified` (`gmt_modified`),
  KEY `idx_did` (`data_id`)
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='多租户改造';

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
BEGIN;
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 1, 'app.yml', 'DEFAULT_GROUP', '', 'name=\"a\"', '0d7b3a1eb830d2fa6cbb54a16cf43015', '2024-03-28 23:42:17', '2024-03-28 23:42:18', 'leaderdev', '192.168.65.1', 'I', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (1, 2, 'app.yml', 'DEFAULT_GROUP', '', 'name=\"a\"', '0d7b3a1eb830d2fa6cbb54a16cf43015', '2024-03-28 23:42:52', '2024-03-28 23:42:52', NULL, '192.168.65.1', 'D', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 3, 'product-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info', '136ade933dab630a9f5c4b9bff2a3355', '2024-03-29 17:27:53', '2024-03-29 17:27:53', 'nacos', '192.168.65.1', 'I', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 4, 'application-dev', 'DEFAULT_GROUP', '', 'useLocalCache: true', '00b77727c9b4a661b8ae12cd7de1395f', '2024-03-29 17:29:30', '2024-03-29 17:29:31', 'nacos', '192.168.65.1', 'I', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 5, 'application-dev.yml', 'DEFAULT_GROUP', '', 'useLocalCache: true', '00b77727c9b4a661b8ae12cd7de1395f', '2024-03-29 17:30:45', '2024-03-29 17:30:46', NULL, '192.168.65.1', 'I', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (3, 6, 'application-dev', 'DEFAULT_GROUP', '', 'useLocalCache: true', '00b77727c9b4a661b8ae12cd7de1395f', '2024-03-29 17:30:49', '2024-03-29 17:30:50', NULL, '192.168.65.1', 'D', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (2, 7, 'product-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info', '136ade933dab630a9f5c4b9bff2a3355', '2024-03-29 17:33:30', '2024-03-29 17:33:30', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 8, 'product-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\nuser:\n  name: chj\n  age: 18', '058502ad862f2f2bb42035a1e26f9905', '2024-03-29 18:11:22', '2024-03-29 18:11:22', NULL, '192.168.65.1', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 9, 'application-dev.yml', 'DEFAULT_GROUP', '', 'useLocalCache: true', '00b77727c9b4a661b8ae12cd7de1395f', '2024-03-29 18:11:22', '2024-03-29 18:11:22', NULL, '192.168.65.1', 'I', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (6, 10, 'product-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\nuser:\n  name: chj\n  age: 18', '058502ad862f2f2bb42035a1e26f9905', '2024-03-29 18:12:48', '2024-03-29 18:12:48', NULL, '192.168.65.1', 'D', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (7, 11, 'application-dev.yml', 'DEFAULT_GROUP', '', 'useLocalCache: true', '00b77727c9b4a661b8ae12cd7de1395f', '2024-03-29 18:12:48', '2024-03-29 18:12:48', NULL, '192.168.65.1', 'D', '', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (4, 12, 'application-dev.yml', 'DEFAULT_GROUP', '', 'useLocalCache: true', '00b77727c9b4a661b8ae12cd7de1395f', '2024-03-29 18:19:44', '2024-03-29 18:19:45', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (4, 13, 'application-dev.yml', 'DEFAULT_GROUP', '', 'useLocalCache: false', '06f3e3deb62fa02b88f0d0f364c0da40', '2024-03-29 18:20:44', '2024-03-29 18:20:44', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (4, 14, 'application-dev.yml', 'DEFAULT_GROUP', '', 'useLocalCache: false', '06f3e3deb62fa02b88f0d0f364c0da40', '2024-03-29 18:21:40', '2024-03-29 18:21:40', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (4, 15, 'application-dev.yml', 'DEFAULT_GROUP', '', 'useLocalCache: false', '06f3e3deb62fa02b88f0d0f364c0da40', '2024-03-29 18:24:13', '2024-03-29 18:24:13', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (4, 16, 'application-dev.yml', 'DEFAULT_GROUP', '', 'useLocalCache: aaa嗷嗷', 'dfdd0af7a500faceb17b9385273718d4', '2024-03-29 18:27:21', '2024-03-29 18:27:22', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (4, 17, 'application-dev.yml', 'DEFAULT_GROUP', '', 'useLocalCache: aaa嗷嗷啊', '920bbc315a1acc6f3a93d8724acc5459', '2024-03-29 18:34:09', '2024-03-29 18:34:09', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 18, 'uaa-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\nuser:\n  name: chj\n  age: 18', '058502ad862f2f2bb42035a1e26f9905', '2024-03-30 01:04:59', '2024-03-30 01:04:59', NULL, '192.168.65.1', 'I', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (14, 19, 'uaa-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\nuser:\n  name: chj\n  age: 18', '058502ad862f2f2bb42035a1e26f9905', '2024-03-30 01:05:33', '2024-03-30 01:05:33', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (14, 20, 'uaa-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\n', '27933cb5a7514707d004a17d4e3d906c', '2024-03-30 01:06:17', '2024-03-30 01:06:18', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (2, 21, 'product-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\nuser:\n  name: chj\n  age: 18', '058502ad862f2f2bb42035a1e26f9905', '2024-03-30 03:18:08', '2024-03-30 03:18:08', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (14, 22, 'uaa-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8889\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\n', 'c1e32e133e17a665ffc76670674869df', '2024-03-30 03:18:33', '2024-03-30 03:18:34', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (2, 23, 'product-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8888\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://192.168.0.151:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\n', '10e13b9fd74ed3b7dfefc2124fb61719', '2024-03-30 14:43:25', '2024-03-30 14:43:24', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (4, 24, 'application-dev.yml', 'DEFAULT_GROUP', '', 'useLocalCache: aaa嗷嗷啊1', '9e83b616beaba3b8f5bd2a10c739a318', '2024-03-30 14:44:40', '2024-03-30 14:44:40', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (14, 25, 'uaa-dev.yml', 'DEFAULT_GROUP', '', 'server:\n  port: 8889\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://192.168.0.151:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\n', 'b00201c15dfe5f5691bb84bb908d73f5', '2024-03-30 14:44:59', '2024-03-30 14:45:00', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (2, 26, 'product-dev.yml', 'DEFAULT_GROUP', '', '\nspringdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://192.168.0.151:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\n# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\n', '645ff81f38bc86820171471a6286c2ef', '2024-03-30 14:45:16', '2024-03-30 14:45:16', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (0, 27, 'gateway-dev.yml', 'DEFAULT_GROUP', '', 'a: a', 'a47864918ca9e5733d9f1c22f49afeb6', '2024-03-30 14:55:37', '2024-03-30 14:55:37', 'nacos', '192.168.65.1', 'I', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (4, 28, 'application-dev.yml', 'DEFAULT_GROUP', '', 'springdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://192.168.0.151:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true', 'd1c1e4f7d98520ce118da539a9c7a29a', '2024-03-31 15:25:32', '2024-03-31 15:25:31', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (23, 29, 'gateway-dev.yml', 'DEFAULT_GROUP', '', 'a: a', 'a47864918ca9e5733d9f1c22f49afeb6', '2024-03-31 15:27:36', '2024-03-31 15:27:36', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (4, 30, 'application-dev.yml', 'DEFAULT_GROUP', '', 'springdoc:\n  swagger-ui:\n    # 持久化认证数据，如果设置为 true，它会保留授权数据并且不会在浏览器关闭/刷新时丢失\n    persistAuthorization: true\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://192.168.0.151:3306/luban?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&useSSL=false\n    username: root\n    password: jedeiah\n    hikari:\n      connection-timeout: 30000  # 获取连接的超时时间（单位：毫秒），默认值为 30000 30秒\n      idle-timeout: 180000  # 连接空闲时的超时时间（单位：毫秒），默认值为 600000 10分钟\n      max-lifetime: 180000  # 连接的最大生命周期（单位：毫秒），默认值为 1800000 30分钟\n      maximum-pool-size: 10  # 连接池中允许的最大连接数，默认值为 10\n      minimum-idle: 5  # 连接池中保持的最小空闲连接数，默认值为 maximum-pool-size 的一半\n      connection-test-query: SELECT 1  # 用于测试连接的 SQL 查询语句，默认值为 null\n      validation-timeout: 3000  # 连接验证超时时间（单位：毫秒），默认值为 5000\n      leak-detection-threshold: 0  # 连接泄漏检测阈值（单位：毫秒），默认值为 0\n      initialization-fail-timeout: 1000  # 初始化失败超时时间（单位：毫秒），默认值为 1000\n      isolate-internal-queries: false  # 是否隔离内部查询，默认值为 false\n      allow-pool-suspension: false  # 是否允许连接池暂停，默认值为 false\n      read-only: false  # 连接是否只读，默认值为 false\n      register-mbeans: false  # 是否注册 JMX MBeans，默认值为 false\n      auto-commit: true  # 是否自动提交事务，默认值为 true\n\nmybatis-plus:\n  typeEnumsPackage: com.jedeiah.commons.enums', '2ea90b3224efa348627254df224b4c02', '2024-03-31 15:28:21', '2024-03-31 15:28:21', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (23, 31, 'gateway-dev.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      globalcors:\n        corsConfigurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n      routes:\n        - id: uaa\n          uri: lb://uaa\n          predicates:\n            - Path=/api/uaa/**\n          filters:\n            - StripPrefix=2\n            - name: RequestRateLimiter #局部限流过滤器，请求数限流 ，使用默认的facatory\n              args:\n                key-resolver: \"#{@ipKeyResolver}\"# 用户身份唯一标识（与代码里的注释写法一致）\n                redis-rate-limiter.replenishRate: 1 #每秒只允许一个请求\n                redis-rate-limiter.burstCapacity: 3 #宽限的请求数量（即实际允许并发4个请求）\n        - id: product\n          uri: lb://product\n          predicates:\n            - Path=/api/product/**\n          filters:\n            - StripPrefix=2\n\n', '521db984f9be5cbb9a6a1d00d3875671', '2024-03-31 23:13:11', '2024-03-31 23:13:10', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (23, 32, 'gateway-dev.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      globalcors:\n        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题\n        corsConfigurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOrigins: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n              - OPTIONS\n            allowedHeaders: \"*\" # 允许在请求中携带的头信息\n            allowCredentials: true # 是否允许携带cookie\n            maxAge: 360000 # 这次跨域检测的有效期\n      routes:\n        - id: uaa\n          uri: lb://uaa\n          predicates:\n            - Path=/api/uaa/**\n          filters:\n            - StripPrefix=2\n            - name: RequestRateLimiter #局部限流过滤器，请求数限流 ，使用默认的facatory\n              args:\n                key-resolver: \"#{@ipKeyResolver}\"# 用户身份唯一标识（与代码里的注释写法一致）\n                redis-rate-limiter.replenishRate: 1 #每秒只允许一个请求\n                redis-rate-limiter.burstCapacity: 3 #宽限的请求数量（即实际允许并发4个请求）\n        - id: product\n          uri: lb://product\n          predicates:\n            - Path=/api/product/**\n          filters:\n            - StripPrefix=2\n\n', 'f151c397c573fff4c9e7a52c87d9d853', '2024-03-31 23:21:34', '2024-03-31 23:21:35', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (23, 33, 'gateway-dev.yml', 'DEFAULT_GROUP', '', 'spring:\n  cloud:\n    gateway:\n      globalcors:\n        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题\n        corsConfigurations:\n          \'[/**]\': # 匹配所有请求\n            allowedOriginPatterns: \"*\" #跨域处理 允许所有的域\n            allowedMethods: # 支持的方法\n              - GET\n              - POST\n              - PUT\n              - DELETE\n              - OPTIONS\n            allowedHeaders: \"*\" # 允许在请求中携带的头信息\n            allowCredentials: true # 是否允许携带cookie\n            maxAge: 360000 # 这次跨域检测的有效期\n      routes:\n        - id: uaa\n          uri: lb://uaa\n          predicates:\n            - Path=/api/uaa/**\n          filters:\n            - StripPrefix=2\n            - name: RequestRateLimiter #局部限流过滤器，请求数限流 ，使用默认的facatory\n              args:\n                key-resolver: \"#{@ipKeyResolver}\"# 用户身份唯一标识（与代码里的注释写法一致）\n                redis-rate-limiter.replenishRate: 1 #每秒只允许一个请求\n                redis-rate-limiter.burstCapacity: 3 #宽限的请求数量（即实际允许并发4个请求）\n        - id: product\n          uri: lb://product\n          predicates:\n            - Path=/api/product/**\n          filters:\n            - StripPrefix=2\n\n', '876d3870838a8bf1e6d3db2b276b52e8', '2024-04-01 15:45:31', '2024-04-01 15:45:31', 'nacos', '192.168.65.1', 'U', 'dev', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`, `encrypted_data_key`) VALUES (14, 34, 'uaa-dev.yml', 'DEFAULT_GROUP', '', '# Logger Config\n# logging:\n#   level:\n#     com.jedeiah: debug\n#     com.zaxxer.hikari: info\n\n', '88a08e03abdada0e813ba4d0afe12db8', '2024-04-02 18:34:14', '2024-04-02 18:34:14', 'nacos', '192.168.65.1', 'U', 'dev', '');
COMMIT;

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions` (
  `role` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'role',
  `resource` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'resource',
  `action` varchar(8) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'action',
  UNIQUE KEY `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of permissions
-- ----------------------------
BEGIN;
INSERT INTO `permissions` (`role`, `resource`, `action`) VALUES ('kaifa_dev', 'dev:*:*', 'r');
INSERT INTO `permissions` (`role`, `resource`, `action`) VALUES ('kaifa_test', 'test:*:*', 'r');
INSERT INTO `permissions` (`role`, `resource`, `action`) VALUES ('leader_dev', 'dev:*:*', 'rw');
INSERT INTO `permissions` (`role`, `resource`, `action`) VALUES ('leader_text', 'test:*:*', 'rw');
COMMIT;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (
  `username` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'username',
  `role` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'role',
  UNIQUE KEY `idx_user_role` (`username`,`role`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of roles
-- ----------------------------
BEGIN;
INSERT INTO `roles` (`username`, `role`) VALUES ('kaifadev', 'kaifa_dev');
INSERT INTO `roles` (`username`, `role`) VALUES ('kaifatest', 'kaifa_test');
INSERT INTO `roles` (`username`, `role`) VALUES ('leaderdev', 'leader_dev');
INSERT INTO `roles` (`username`, `role`) VALUES ('leadertest', 'leader_text');
INSERT INTO `roles` (`username`, `role`) VALUES ('nacos', 'ROLE_ADMIN');
COMMIT;

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='租户容量信息表';

-- ----------------------------
-- Records of tenant_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) COLLATE utf8mb4_general_ci NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) COLLATE utf8mb4_general_ci DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) COLLATE utf8mb4_general_ci DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='tenant_info';

-- ----------------------------
-- Records of tenant_info
-- ----------------------------
BEGIN;
INSERT INTO `tenant_info` (`id`, `kp`, `tenant_id`, `tenant_name`, `tenant_desc`, `create_source`, `gmt_create`, `gmt_modified`) VALUES (2, '1', 'dev', 'dev', '开发环境', 'nacos', 1711640015359, 1711640015359);
INSERT INTO `tenant_info` (`id`, `kp`, `tenant_id`, `tenant_name`, `tenant_desc`, `create_source`, `gmt_create`, `gmt_modified`) VALUES (3, '1', 'test', 'test', '测试环境', 'nacos', 1711640026204, 1711640026204);
COMMIT;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `username` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'username',
  `password` varchar(500) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'password',
  `enabled` tinyint(1) NOT NULL COMMENT 'enabled',
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of users
-- ----------------------------
BEGIN;
INSERT INTO `users` (`username`, `password`, `enabled`) VALUES ('kaifadev', '$2a$10$qYlJW/BD80g6O3lN36RI2OXn.QcIDEi8aQOBB0gwuGtMuQcQnvuTm', 1);
INSERT INTO `users` (`username`, `password`, `enabled`) VALUES ('kaifatest', '$2a$10$WiUqrXF6dxCvPzjNbg1pT.TWQvwrnTLYgkqftxPOxfdy6f.PfvRM6', 1);
INSERT INTO `users` (`username`, `password`, `enabled`) VALUES ('leaderdev', '$2a$10$45PgfD0hjuUYGUVvE9uMuewit9fZgwb38LjSFBKzZfhkt6AKoNDCi', 1);
INSERT INTO `users` (`username`, `password`, `enabled`) VALUES ('leadertest', '$2a$10$/verw6GOIPzutINkvEKXveNVVX7ViZCmqEvC24PK2iwIEZeqrxXua', 1);
INSERT INTO `users` (`username`, `password`, `enabled`) VALUES ('nacos', '$2a$10$dTWQWzzcSpEj8v75DlSVw.P/WM2BfZuWG5rwxb3DCisAy7HcUyWxO', 1);
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
